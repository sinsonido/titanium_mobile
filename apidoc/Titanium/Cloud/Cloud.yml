---
name: Titanium.Cloud
summary: The top level Cloud module for making calls to Appcelerator Cloud Services (ACS).
description: |
    Appcelerator Cloud Services (ACS) provides a wide array of automatically-scaled data storage 
    and web services, such as user logins, photo uploads, checkins, status updates, and push 
    notifications, without the need to learn multiple third-party SDKs or do any 
    server-side programming. Remote calls to ACS are done using REST APIs, which may be used with any 
    client technology that supports HTTP.
    
    The Cloud module hides the details the underlying REST APIs with a familiar programming model 
    and intuitive API schema. You also have the option of calling the ACS REST APIs directly with the 
    <Titanium.Cloud.sendRequest> method. This latter approach adds some complexity, since you need to provide API 
    endpoints and HTTP methods for each method call. However, it also lets you call new REST API methods 
     as soon as they are deployed, without having to wait for an update to the structured APIs. 
    
    For a more detailed overview of ACS and how to configure an application to use it, refer to the 
    [Integrating with Appcelerator Cloud
    Services](http://docs.appcelerator.com/titanium/latest/#!/guide/Integrating_with_Appcelerator_Cloud_Services).
        
    #### Using the Titanium.Cloud Module
    
    This module is not included in the Titanium namespace, but it is bundled with the
    Titanium SDK as an optional CommonJS module. To use it, import the module using
    `require`: 
    
        var Cloud = require('ti.cloud');
    
    #### tiapp.xml Properties

    Studio will create a pair of API keys (Development and Production) for each Titanium
    application depending on the user preference specified when creating the proejct. These keys
    will be stored in the `tiapp.xml` file.  One of the keys will be used during application
    builds depending on the build type (development or production).

    The supported properties in the `tiapp.xml` file are:

        <property name="acs-api-key-development" type="string">YOUR DEVELOPMENT API KEY HERE</property>
        <property name="acs-api-key-production" type="string">YOUR PRODUCTION API KEY HERE</property>
        <property name="acs-api-key" type="string">YOUR API KEY HERE</property>

    If a deployment-specific setting is provided (production or development) then that value will
    be used for the current deployment environment.

    There is also an optional setting to allow you to change the base URL for ACS requests. You 
    will most likely never need to specify this. It can be specified deployment-specific, or
    generic:

        <property name="acs-base-url-development" type="string">DEVELOPMENT API URL HERE</property>
        <property name="acs-base-url-production" type="string">PRODUCTION API URL HERE</property>
        <property name="acs-base-url" type="string">API URL HERE</property>

    By default, Ti.Cloud always uses SSL for communicating with the ACS servers. This behavior can be overridden
    by setting the URLs with their non-SSL counterpart.

        <property name="acs-base-url" type="string">http://api.cloud.appcelerator.com</property>

    #### Pre 3.1.1 Release behavior
    Before Release 3.1.1 specify URLs without the protocol:

        <property name="acs-base-url" type="string">api.cloud.appcelerator.com</property>

    To disable SSL, add this line to the application code:

        Cloud.useSecure = false;

extends: Titanium.Module
excludes: { methods: [ 'addEventListener', 'fireEvent', 'removeEventListener',  ] }
since: {android: "2.0", blackberry: "3.3", iphone: "2.0", ipad: "2.0"}

methods:
  - name: hasStoredSession
    summary: Checks if there is a stored user session.
    deprecated:
        since: "2.1.2"
        notes: See [accessToken](Titanium.Cloud.accessToken) and [sessionId](Titanium.Cloud.sessionId) for details on persisting session data.
    description: |
        True is returned after successfully calling <Titanium.Cloud.Users.create> or 
        <Titanium.Cloud.Users.login>, and false after successfully calling 
        <Titanium.Cloud.Users.logout>.
    returns:
        type: Boolean
        
  - name: retrieveStoredSession
    summary: Returns the stored user session identifier.
    deprecated:
        since: "2.1.2"
        notes: See [accessToken](Titanium.Cloud.accessToken) and [sessionId](Titanium.Cloud.sessionId) for details on persisting session data.
    description: |
        A value is returned after successfully calling <Titanium.Cloud.Users.create> or 
        <Titanium.Cloud.Users.login>, and null after successfully calling 
        <Titanium.Cloud.Users.logout>. 
        
        All calls made using the Cloud module automatically use this value and, thus, it only needs 
        to be used when manually making calls to the ACS servers using <Titanium.Network.HTTPClient>. 
    returns:
        type: String
  
  - name: sendRequest
    summary: Makes a REST API call to the ACS server.
    description: |
            By default, the base URL for each REST call is the ACS public endpoint 
            (**api.cloud.appcelerator.com/v1**). You specify the final URL fragment of the REST endpoint
             (**users/login.json**, for example), the appropriate HTTP method type for the call, 
             and the data to send with the request.

            You can find REST method endpoints and their HTTP method types in the [ACS API Reference](/cloud/latest/#!/guide/rest).
        
    parameters:

      - name: parameters
        summary: | 
            A Dictionary containing the parameters to send with the request. It must contain the following
            key-value pairs:

            * **url** -- A string specifying the last fragment of the request URL.
            * **method** -- A string specifying the HTTP method to use: "GET", "POST", "PUT", or "DELETE".
            * **data** -- A Dictionary containing name-value pairs to send in the request.
        type: Dictionary

      - name: callback
        summary: Callback function to execute when a response is received.
        type: Callback<CloudResponse>

properties:
  - name: debug
    summary: Indicates whether internal debug logging should be output to the console.
    type: Boolean
    default: false
    
  - name: ondatastream
    summary: Function to be called at regular intervals as the request data is being received.
    description: |
        Set this property before calling any ACS method for which you want to track the transmission.
        
        When you are done tracking the transmission, set this to null.
    type: Callback<CloudStreamProgress>
    
  - name: onsendstream
    summary: Function to be called at regular intervals as the request data is being transmitted.
    description: |
        Set this property before calling any ACS method for which you want to track the transmission.
        
        When you are done tracking the transmission, set this to null.
    type: Callback<CloudStreamProgress>
    
  - name: useSecure
    summary: Indicates whether to use SSL when sending requests to ACS.
    type: Boolean
    default: true
    deprecated:
        since: "2.0"
        removed: "3.1.1"
        notes: |
            To disable SSL, set the `acs-base-url` and `acs-authbase-url` properties in the `tiapp.xml` using the HTTP URL.
            To enable SSL, use the HTTPS URL.

                <property name="acs-base-url" type="string">http://api.cloud.appcelerator.com</property>

  - name: sessionId
    since: "2.1.2"
    summary: Identifies the current session
    type: String
    description: |
        Contains the session identifier after successfully calling <Titanium.Cloud.Users.create> or
        <Titanium.Cloud.Users.login>, and null after successfully calling <Titanium.Cloud.Users.logout>.

        All calls made using the Cloud module automatically use this value and, thus, it only needs
        to be used when manually making calls to the ACS servers using <Titanium.Network.HTTPClient>.

        The session identifier is not persisted across application sessions by the module. An application
        can persist the session identifier by saving the value in secure storage and restoring the value
        of this property in the next application session.

        The `sessionId` is not used with 3-legged OAuth authentication; use 
        [accessToken](Titanium.Cloud.accessToken) instead.

  - name: accessToken
    since: "2.1.2"
    summary: Identifies the current access token when using 3-Legged OAuth
    type: String
    description: |
        Contains the access token after successfully calling <Titanium.Cloud.Users.secureCreate> or
        <Titanium.Cloud.Users.secureLogin>, and null after successfully calling <Titanium.Cloud.Users.logout>.

        All calls made using the Cloud module automatically use this value and, thus, it only needs
        to be used when manually making calls to the ACS servers using <Titanium.Network.HTTPClient>.

        The `accessToken` is not persisted across application sessions by the module. An application
        can persist the accessToken by saving the value in secure storage and restoring the value
        of this property in the next application session.

        The `accessToken` is not used with 2-legged OAuth or API key 
        authentication; use [sessionId](Titanium.Cloud.sessionId) instead.

  - name: expiresIn
    since: "2.1.2"
    permission: read-only
    summary: Indicates the number of seconds before the access token expires
    type: Number
    description: |
        Contains the number of seconds until the access token expires after successfully calling
        <Titanium.Cloud.Users.secureCreate> or <Titanium.Cloud.Users.secureLogin>, and null after successfully
        calling <Titanium.Cloud.Users.logout>.

examples:
  - title: Creating a User with sendRequest()
    example: |
        This example uses the generic <Titanium.Cloud.sendRequest> method to create a new user and,
        if successful, displays an alert that contains information about the session and the user.

            Cloud.sendRequest({
                url : "users/login.json",
                method : "POST",
                data : {
                    login : 'username',
                    password : 'password'
                }
            }, function(e) {// The callback called when the request completes
                if (e.success) {
                    var user = e.users[0];
                    alert('Success:\n' + 'id: ' + user.id + '\n' + 'sessionId: ' + Cloud.sessionId + '\n' + 'first name: ' + user.first_name + '\n' + 'last name: ' + user.last_name);
                } else {
                    alert('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
                }
            }); 

---
name: CloudStreamProgress
summary: Argument passed to the callback as a request is transmitted or received.
properties:
  - name: progress
    summary: A value from 0.0-1.0 with the progress of the exchange.
    type: Number
    
  - name: url
    summary: The URL for the request, to help identify it.
    type: String
